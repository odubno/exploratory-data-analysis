df$Complaint.New[df$Complaint.Type %in% unsanitary.condition] <- "Unsanitary Condition"
df$Complaint.New[df$Complaint.Type %in% graffiti] <- "Graffiti"
df$Complaint.New[df$Complaint.Type %in% rodent] <- "Rodent"
df$Complaint.New[df$Complaint.Type %in% general] <- "General"
df$Complaint.New[df$Complaint.Type %in% homeless] <- "Homeless"
df$Complaint.New[df$Complaint.Type %in% consumer.complaint] <- "Consumer Complaint"
df$Complaint.New[df$Complaint.Type %in% taxi.complaint] <- "Taxi Complaint"
df$Complaint.New[df$Complaint.Type %in% non.emergency.matter] <- "Non Emergency Matter"
df$Complaint.New[df$Complaint.Type %in% animal.concern] <- "Animal Concern"
df$Complaint.New[df$Complaint.Type %in% safety] <- "Safety"
df$Complaint.New[df$Complaint.Type %in% rental.car] <- "Rental Car"
df$Complaint.New[df$Complaint.Type %in% health.issues] <- "Health Issues"
df$Complaint.New[df$Complaint.Type %in% drugs] <- "Drugs"
df$Complaint.New[df$Complaint.Type %in% dof] <- "DOF"
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
library(ggplot2)
library(GGally)
library(plyr)
library(tidyverse)
library(reshape2)
df <- read.csv("data/311_service_requests_2017.csv", nrow=1000)
noise <- c("Noise - Residential", "Noise - Street/Sidewalk", "Noise", "Noise - Commercial", "Noise - Vehicle", "Noise - Park", "Noise - Helicopter")
building <- c("HEAT/HOT WATER", "Water System", "PLUMBING", "DOOR/WINDOW", "Sewer", "WATER LEAK", "General Construction/Plumbing", "Building/Use", "ELECTRIC", "FLOORING/STAIRS", "Maintenance or Facility", "Elevator", "Lead", "Plumbing", "Housing - Low Income Senior", "Indoor Air Quality", "Electrical", "Water Conservation", "School Maintenance", "Boilers", "Water Quality", "ELEVATOR", "OUTSIDE BUILDING", "Indoor Sewage", "Non-Residential Heat")
parking <- c("Illegal Parking", "Blocked Driveway", "Derelict Vehicle", "Derelict Vehicles", "Vacant Lot", "Derelict Bicycle")
traffic <- c("Traffic Signal Condition", "Traffic")
street.condition <- c("Street Condition", "Street Light Condition", "Damaged Tree", "New Tree Request", "Overgrown Tree/Branches", "Snow", "Dead/Dying Tree", "Broken Muni Meter", "Root/Sewer/Sidewalk Condition", "Air Quality", "Street Sign - Damaged", "Sidewalk Condition","Street Sign - Missing", "Highway Condition", "Illegal Tree Damage", "Standing Water", "Curb Condition", "Violation of Park Rules", "Street Sign - Dangling", "Broken Parking Meter", "Overflowing Litter Baskets")
unsanitary.condition <- c("UNSANITARY CONDITION", "Sanitation Condition", "Missed Collection (All Materials)", "Dirty Conditions")
graffiti <- c("PAINT/PLASTER", "Graffiti")
rodent <- c("Rodent")
general <- c("GENERAL", "Benefit Card Replacement", "Other Enforcement", "Agency Issues", "Opinion for the Mayor", "Housing Options", "Request Xmas Tree Collection", "DRIE", "Request Large Bulky Item Collection",  "Electronics Waste", "APPLIANCE", "Special Projects Inspection Team (SPIT)", "Litter Basket / Request", "Asbestos")
homeless <- c("Homeless Person Assistance", "Homeless Encampment")
consumer.complaint <- c("Consumer Complaint", "Food Establishment", "Vending", "Cable Complaint")
taxi.complaint <- c("Taxi Complaint", "Taxi Report")
non.emergency.matter <- c("Non-Emergency Police Matter", "Special Enforcement")
animal.concern <- c("Animal Abuse", "Unsanitary Animal Pvt Property", "Animal in a Park")
safety <- c("SAFETY")
rental.car <- c("For Hire Vehicle Complaint")
health.issues <- c("Food Poisoning", "Hazardous Materials", "Smoking", "Industrial Waste")
drugs <- c("Drug Activity", "Drinking")
dof <- c("DOF Literature Request", "SCRIE", "DOF Property - Reduction Issue", "DOF Property - Payment Issue", "DOF Property - Request Copy", "DOF Property - Update Account", "DOT Literature Request", "DOF Parking - Payment Issue", "HPD Literature Request", "DCA / DOH New License Application Request", "DOF Property - Owner Issue", "DPR Internal", "DOF Parking - Tax Exemption")
df$Complaint.New[df$Complaint.Type %in% noise] <- "Noise"
df$Complaint.New[df$Complaint.Type %in% building] <- "Building"
df$Complaint.New[df$Complaint.Type %in% parking] <- "Parking"
df$Complaint.New[df$Complaint.Type %in% traffic] <- "Traffic"
df$Complaint.New[df$Complaint.Type %in% street.condition] <- "Street Condition"
df$Complaint.New[df$Complaint.Type %in% unsanitary.condition] <- "Unsanitary Condition"
df$Complaint.New[df$Complaint.Type %in% graffiti] <- "Graffiti"
df$Complaint.New[df$Complaint.Type %in% rodent] <- "Rodent"
df$Complaint.New[df$Complaint.Type %in% general] <- "General"
df$Complaint.New[df$Complaint.Type %in% homeless] <- "Homeless"
df$Complaint.New[df$Complaint.Type %in% consumer.complaint] <- "Consumer Complaint"
df$Complaint.New[df$Complaint.Type %in% taxi.complaint] <- "Taxi Complaint"
df$Complaint.New[df$Complaint.Type %in% non.emergency.matter] <- "Non Emergency Matter"
df$Complaint.New[df$Complaint.Type %in% animal.concern] <- "Animal Concern"
df$Complaint.New[df$Complaint.Type %in% safety] <- "Safety"
df$Complaint.New[df$Complaint.Type %in% rental.car] <- "Rental Car"
df$Complaint.New[df$Complaint.Type %in% health.issues] <- "Health Issues"
df$Complaint.New[df$Complaint.Type %in% drugs] <- "Drugs"
df$Complaint.New[df$Complaint.Type %in% dof] <- "DOF"
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
library(ggplot2)
library(GGally)
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
install.packages("lubridate")
library(ggplot2)
library(GGally)
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
install.packages("lubridate")
library(ggplot2)
library(GGally)
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
library(ggplot2)
library(GGally)
library(plyr)
library(tidyverse)
library(reshape2)
library(lubridate)
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
df_complaints
df_complaints <- dcast(df_complaints, Complaint.Hour~Complaint.New)
df_complaints
ggparcoord(df_complaints,
columns = c(2:17),
groupColumn = "Complaint.Hour",
scale = "globalminmax",
alphaLines = .7) +
xlab("Indicators") +
ylab("Approval")
ggparcoord(df_complaints, columns = 2:17, groupColumn = "Complaint.Hour", scale = "globalminmax")
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
df_complaints
dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complains <- dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complaints
df_complaints <- dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complaints
ggparcoord(df_complaints,
columns = c(2:17),
groupColumn = "Complaint.Hour",
scale = "globalminmax",
alphaLines = .7) +
xlab("Indicators") +
ylab("Approval")
ggparcoord(df_complaints, columns = 2:17, groupColumn = "Complaint.Hour", scale = "globalminmax")
df_complaints
ggparcoord(df_complaints,
columns = c(2:25),
groupColumn = "Complaint.Hour",
scale = "globalminmax",
alphaLines = .7) +
xlab("Indicators") +
ylab("Approval")
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.Hour", scale = "globalminmax")
df_complaints[2:25] <- lapply(df_complaints[2:25], function(x) as.numeric(sub("%", "", x)))
df_complaints
ggparcoord(df_complaints,
columns = c(2:25),
groupColumn = "Complaint.Hour",
scale = "globalminmax",
alphaLines = .7) +
xlab("Indicators") +
ylab("Approval")
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.Hour", scale = "globalminmax")
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.New", scale = "globalminmax")
df_complaints
library(plotly)
library(plotly)
plot_ly(type = 'parcoords', line = list(color = 'blue'),
dimensions = list(
list(range = c(1,5),
constraintrange = c(1,2),
label = 'A', values = c(1,4)),
list(range = c(1,5),
tickvals = c(1.5,3,4.5),
label = 'B', values = c(3,1.5)),
list(range = c(1,5),
tickvals = c(1,2,4,5),
label = 'C', values = c(2,4),
ticktext = c('text 1', 'text 2', 'text 3', 'text 4')),
list(range = c(1,5),
label = 'D', values = c(4,2))
)
)
plot_ly(type = 'parcoords', line = list(color = 'blue'),
)
plot_ly(type = 'parcoords', line = list(color = 'blue') )
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
df %>%
plot_ly(type = 'parcoords',
line = list(color = ~species_id,
colorscale = list(c(0,'red'),c(0.5,'green'),c(1,'blue'))),
dimensions = list(
list(range = c(2,4.5),
label = 'Sepal Width', values = ~sepal_width),
list(range = c(4,8),
constraintrange = c(5,6),
label = 'Sepal Length', values = ~sepal_length),
list(range = c(0,2.5),
label = 'Petal Width', values = ~petal_width),
list(range = c(1,7),
label = 'Petal Length', values = ~petal_length)
)
)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
df %>%
plot_ly(type = 'parcoords',
line = list(color = ~species_id,
)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
df %>%
plot_ly(type = 'parcoords',
line = list(color = ~species_id))
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv")
df %>%
plot_ly(width = 1000, height = 600) %>%
add_trace(type = 'parcoords',
line = list(color = ~colorVal,
colorscale = 'Jet',
showscale = TRUE,
reversescale = TRUE,
cmin = -4000,
cmax = -100),
dimensions = list(
list(range = c(~min(blockHeight),~max(blockHeight)),
constraintrange = c(100000,150000),
label = 'Block Height', values = ~blockHeight),
list(range = c(~min(blockWidth),~max(blockWidth)),
label = 'Block Width', values = ~blockWidth),
list(tickvals = c(0,0.5,1,2,3),
ticktext = c('A','AB','B','Y','Z'),
label = 'Cyclinder Material', values = ~cycMaterial),
list(range = c(-1,4),
tickvals = c(0,1,2,3),
label = 'Block Material', values = ~blockMaterial),
list(range = c(~min(totalWeight),~max(totalWeight)),
visible = TRUE,
label = 'Total Weight', values = ~totalWeight),
list(range = c(~min(assemblyPW),~max(assemblyPW)),
label = 'Assembly Penalty Weight', values = ~assemblyPW),
list(range = c(~min(HstW),~max(HstW)),
label = 'Height st Width', values = ~HstW),
list(range = c(~min(minHW),~max(minHW)),
label = 'Min Height Width', values = ~minHW),
list(range = c(~min(minWD),~max(minWD)),
label = 'Min Width Diameter', values = ~minWD),
list(range = c(~min(rfBlock),~max(rfBlock)),
label = 'RF Block', values = ~rfBlock)
)
)
markers=paste("markers",letters,sep="_")
data=data.frame(
mark=rep(markers,3),
map=c(rep(1,26) , rep(2,26) , rep(3,26)),
pos=sample(seq(1:100) , 26*3)
)
data
plot_ly(data , x=map , y=pos, mode="markers+lines"  , group=mark)
data
plot_ly(data , x=map , y=pos, mode="markers+lines"  , group=mark)
markers=paste("markers",letters,sep="_")
data=data.frame(
mark=rep(markers,3),
map=c(rep(1,26) , rep(2,26) , rep(3,26)),
pos=sample(seq(1:100) , 26*3)
)
# Make the plot with Plotly
library(plotly)
plot_ly(data , x=map , y=pos, mode="markers+lines"  , group=mark)
iris <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
cbind.data.frame(x=1:nrow(iris), iris[,-5])
iris
iris <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
cbind.data.frame(x=1:nrow(iris), iris[,-5])
d_long <- melt(d, id.vars ="x" )
iris <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
d <- cbind.data.frame(x=1:nrow(iris), iris[,-5])
d_long <- melt(d, id.vars ="x" )
plot_ly(d_long, x=  x, y=value, group= variable, type= "line")
d_long
plot_ly(d_long, x=x, y=value, group=variable, type= "line")
iris <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
library(plotly)
library(reshape2)
# some reproducible data
d <- cbind.data.frame(x=1:nrow(iris), iris[,-5])
# transform to long format using reshape's melt() function
d_long <- melt(d, id.vars ="x" )
# plot the lines using the group argument for different traces.
plot_ly(d_long, x=  x, y=value, group= variable, type= "line")
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
p <- df %>%
plot_ly(type = 'parcoords',
line = list(color = ~species_id,
colorscale = list(c(0,'red'),c(0.5,'green'),c(1,'blue'))),
dimensions = list(
list(range = c(2,4.5),
label = 'Sepal Width', values = ~sepal_width),
list(range = c(4,8),
constraintrange = c(5,6),
label = 'Sepal Length', values = ~sepal_length),
list(range = c(0,2.5),
label = 'Petal Width', values = ~petal_width),
list(range = c(1,7),
label = 'Petal Length', values = ~petal_length)
)
)
df <- read.csv("https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv")
df %>%
plot_ly(type = 'parcoords',
line = list(color = ~species_id,
colorscale = list(c(0,'red'),c(0.5,'green'),c(1,'blue'))),
dimensions = list(
list(range = c(2,4.5),
label = 'Sepal Width', values = ~sepal_width),
list(range = c(4,8),
constraintrange = c(5,6),
label = 'Sepal Length', values = ~sepal_length),
list(range = c(0,2.5),
label = 'Petal Width', values = ~petal_width),
list(range = c(1,7),
label = 'Petal Length', values = ~petal_length)
)
)
df
df_complaints
unique(df_complaints$Complaint.New)
library(parcoords)
parcoords( mtcars )
parcoords( df_complains )
parcoords( df_complains   , brush = "1d-axes" # 2d-strums are really neat
, reorderable = TRUE)
parcoords(df_complains,
brush = "1d-axes",
reorderable = TRUE)
parcoords(mtcars,
brush = "1d-axes",
reorderable = TRUE)
parcoords(
mtcars
, brush = "1d-axes" # 2d-strums are really neat
, reorderable = TRUE
)
parcoords(
mtcars,
dimensions = list(
cyl = list(
title = "cylinder",
tickValues = unique(mtcars$cyl)
)
)
)
parcoords(
mtcars
)
parcoords(
df_complains
)
parcoords(
df_complaints
)
df_complaints
parcoords(
df_complaints , brush = "1d-axes"
)
parcoords(
df_complaints , reorderable = TRUE
)
data( diamonds, package = "ggplot2" )
parcoords(
diamonds[sample(1:nrow(diamonds),1000),]
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parcoords(
df_complaints
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parcoords(
df_complaints
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
)
parcoords(
df_complaints
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = TRUE
)
parcoords(
df_complaints
, brushMode = "2D-strums"
, reorderable = TRUE
)
parcoords(
df_complaints
, brushMode = "1D-strums"
, reorderable = TRUE
)
df <- read.csv("data/311_service_requests_2017.csv", nrow=1000)
noise <- c("Noise - Residential", "Noise - Street/Sidewalk", "Noise", "Noise - Commercial", "Noise - Vehicle", "Noise - Park", "Noise - Helicopter")
building <- c("HEAT/HOT WATER", "Water System", "PLUMBING", "DOOR/WINDOW", "Sewer", "WATER LEAK", "General Construction/Plumbing", "Building/Use", "ELECTRIC", "FLOORING/STAIRS", "Maintenance or Facility", "Elevator", "Lead", "Plumbing", "Housing - Low Income Senior", "Indoor Air Quality", "Electrical", "Water Conservation", "School Maintenance", "Boilers", "Water Quality", "ELEVATOR", "OUTSIDE BUILDING", "Indoor Sewage", "Non-Residential Heat")
parking <- c("Illegal Parking", "Blocked Driveway", "Derelict Vehicle", "Derelict Vehicles", "Vacant Lot", "Derelict Bicycle")
traffic <- c("Traffic Signal Condition", "Traffic")
street.condition <- c("Street Condition", "Street Light Condition", "Damaged Tree", "New Tree Request", "Overgrown Tree/Branches", "Snow", "Dead/Dying Tree", "Broken Muni Meter", "Root/Sewer/Sidewalk Condition", "Air Quality", "Street Sign - Damaged", "Sidewalk Condition","Street Sign - Missing", "Highway Condition", "Illegal Tree Damage", "Standing Water", "Curb Condition", "Violation of Park Rules", "Street Sign - Dangling", "Broken Parking Meter", "Overflowing Litter Baskets")
unsanitary.condition <- c("UNSANITARY CONDITION", "Sanitation Condition", "Missed Collection (All Materials)", "Dirty Conditions")
graffiti <- c("PAINT/PLASTER", "Graffiti")
rodent <- c("Rodent")
general <- c("GENERAL", "Benefit Card Replacement", "Other Enforcement", "Agency Issues", "Opinion for the Mayor", "Housing Options", "Request Xmas Tree Collection", "DRIE", "Request Large Bulky Item Collection",  "Electronics Waste", "APPLIANCE", "Special Projects Inspection Team (SPIT)", "Litter Basket / Request", "Asbestos")
homeless <- c("Homeless Person Assistance", "Homeless Encampment")
consumer.complaint <- c("Consumer Complaint", "Food Establishment", "Vending", "Cable Complaint")
taxi.complaint <- c("Taxi Complaint", "Taxi Report")
non.emergency.matter <- c("Non-Emergency Police Matter", "Special Enforcement")
animal.concern <- c("Animal Abuse", "Unsanitary Animal Pvt Property", "Animal in a Park")
safety <- c("SAFETY")
rental.car <- c("For Hire Vehicle Complaint")
health.issues <- c("Food Poisoning", "Hazardous Materials", "Smoking", "Industrial Waste")
drugs <- c("Drug Activity", "Drinking")
dof <- c("DOF Literature Request", "SCRIE", "DOF Property - Reduction Issue", "DOF Property - Payment Issue", "DOF Property - Request Copy", "DOF Property - Update Account", "DOT Literature Request", "DOF Parking - Payment Issue", "HPD Literature Request", "DCA / DOH New License Application Request", "DOF Property - Owner Issue", "DPR Internal", "DOF Parking - Tax Exemption")
df$Complaint.New[df$Complaint.Type %in% noise] <- "Noise"
df$Complaint.New[df$Complaint.Type %in% building] <- "Building"
df$Complaint.New[df$Complaint.Type %in% parking] <- "Parking"
df$Complaint.New[df$Complaint.Type %in% traffic] <- "Traffic"
df$Complaint.New[df$Complaint.Type %in% street.condition] <- "Street Condition"
df$Complaint.New[df$Complaint.Type %in% unsanitary.condition] <- "Unsanitary Condition"
df$Complaint.New[df$Complaint.Type %in% graffiti] <- "Graffiti"
df$Complaint.New[df$Complaint.Type %in% rodent] <- "Rodent"
df$Complaint.New[df$Complaint.Type %in% general] <- "General"
df$Complaint.New[df$Complaint.Type %in% homeless] <- "Homeless"
df$Complaint.New[df$Complaint.Type %in% consumer.complaint] <- "Consumer Complaint"
df$Complaint.New[df$Complaint.Type %in% taxi.complaint] <- "Taxi Complaint"
df$Complaint.New[df$Complaint.Type %in% non.emergency.matter] <- "Non Emergency Matter"
df$Complaint.New[df$Complaint.Type %in% animal.concern] <- "Animal Concern"
df$Complaint.New[df$Complaint.Type %in% safety] <- "Safety"
df$Complaint.New[df$Complaint.Type %in% rental.car] <- "Rental Car"
df$Complaint.New[df$Complaint.Type %in% health.issues] <- "Health Issues"
df$Complaint.New[df$Complaint.Type %in% drugs] <- "Drugs"
df$Complaint.New[df$Complaint.Type %in% dof] <- "DOF"
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
df_complaints <- dcast(df_complaints, Complaint.Hour~Complaint.New)
df_complaints[2:25] <- lapply(df_complaints[2:25], function(x) as.numeric(sub("%", "", x)))
dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
dcast(df_complaints, Complaint.New~Complaint.Hour)
ggparcoord(df_complaints, columns = 2:, groupColumn = "Complaint.Hour", scale = "globalminmax")
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
df_complaints <- dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complaints
ggparcoord(df_complaints,
columns = c(2:25),
groupColumn = "Complaint.Hour",
scale = "globalminmax",
alphaLines = .7) +
xlab("Indicators") +
ylab("Approval")
ggparcoord(df_complaints, columns = 2:, groupColumn = "Complaint.Hour", scale = "globalminmax")
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.Hour", scale = "globalminmax")
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.New", scale = "globalminmax")
library(parcoords)
parcoords(df_complaint)
library(parcoords)
parcoords(df_complaints)
df <- read.csv("data/311_service_requests_2017.csv", nrow=1000)
noise <- c("Noise - Residential", "Noise - Street/Sidewalk", "Noise", "Noise - Commercial", "Noise - Vehicle", "Noise - Park", "Noise - Helicopter")
building <- c("HEAT/HOT WATER", "Water System", "PLUMBING", "DOOR/WINDOW", "Sewer", "WATER LEAK", "General Construction/Plumbing", "Building/Use", "ELECTRIC", "FLOORING/STAIRS", "Maintenance or Facility", "Elevator", "Lead", "Plumbing", "Housing - Low Income Senior", "Indoor Air Quality", "Electrical", "Water Conservation", "School Maintenance", "Boilers", "Water Quality", "ELEVATOR", "OUTSIDE BUILDING", "Indoor Sewage", "Non-Residential Heat")
parking <- c("Illegal Parking", "Blocked Driveway", "Derelict Vehicle", "Derelict Vehicles", "Vacant Lot", "Derelict Bicycle")
traffic <- c("Traffic Signal Condition", "Traffic")
street.condition <- c("Street Condition", "Street Light Condition", "Damaged Tree", "New Tree Request", "Overgrown Tree/Branches", "Snow", "Dead/Dying Tree", "Broken Muni Meter", "Root/Sewer/Sidewalk Condition", "Air Quality", "Street Sign - Damaged", "Sidewalk Condition","Street Sign - Missing", "Highway Condition", "Illegal Tree Damage", "Standing Water", "Curb Condition", "Violation of Park Rules", "Street Sign - Dangling", "Broken Parking Meter", "Overflowing Litter Baskets")
unsanitary.condition <- c("UNSANITARY CONDITION", "Sanitation Condition", "Missed Collection (All Materials)", "Dirty Conditions")
graffiti <- c("PAINT/PLASTER", "Graffiti")
rodent <- c("Rodent")
general <- c("GENERAL", "Benefit Card Replacement", "Other Enforcement", "Agency Issues", "Opinion for the Mayor", "Housing Options", "Request Xmas Tree Collection", "DRIE", "Request Large Bulky Item Collection",  "Electronics Waste", "APPLIANCE", "Special Projects Inspection Team (SPIT)", "Litter Basket / Request", "Asbestos")
homeless <- c("Homeless Person Assistance", "Homeless Encampment")
consumer.complaint <- c("Consumer Complaint", "Food Establishment", "Vending", "Cable Complaint")
taxi.complaint <- c("Taxi Complaint", "Taxi Report")
non.emergency.matter <- c("Non-Emergency Police Matter", "Special Enforcement")
animal.concern <- c("Animal Abuse", "Unsanitary Animal Pvt Property", "Animal in a Park")
safety <- c("SAFETY")
rental.car <- c("For Hire Vehicle Complaint")
health.issues <- c("Food Poisoning", "Hazardous Materials", "Smoking", "Industrial Waste")
drugs <- c("Drug Activity", "Drinking")
dof <- c("DOF Literature Request", "SCRIE", "DOF Property - Reduction Issue", "DOF Property - Payment Issue", "DOF Property - Request Copy", "DOF Property - Update Account", "DOT Literature Request", "DOF Parking - Payment Issue", "HPD Literature Request", "DCA / DOH New License Application Request", "DOF Property - Owner Issue", "DPR Internal", "DOF Parking - Tax Exemption")
df$Complaint.New[df$Complaint.Type %in% noise] <- "Noise"
df$Complaint.New[df$Complaint.Type %in% building] <- "Building"
df$Complaint.New[df$Complaint.Type %in% parking] <- "Parking"
df$Complaint.New[df$Complaint.Type %in% traffic] <- "Traffic"
df$Complaint.New[df$Complaint.Type %in% street.condition] <- "Street Condition"
df$Complaint.New[df$Complaint.Type %in% unsanitary.condition] <- "Unsanitary Condition"
df$Complaint.New[df$Complaint.Type %in% graffiti] <- "Graffiti"
df$Complaint.New[df$Complaint.Type %in% rodent] <- "Rodent"
df$Complaint.New[df$Complaint.Type %in% general] <- "General"
df$Complaint.New[df$Complaint.Type %in% homeless] <- "Homeless"
df$Complaint.New[df$Complaint.Type %in% consumer.complaint] <- "Consumer Complaint"
df$Complaint.New[df$Complaint.Type %in% taxi.complaint] <- "Taxi Complaint"
df$Complaint.New[df$Complaint.Type %in% non.emergency.matter] <- "Non Emergency Matter"
df$Complaint.New[df$Complaint.Type %in% animal.concern] <- "Animal Concern"
df$Complaint.New[df$Complaint.Type %in% safety] <- "Safety"
df$Complaint.New[df$Complaint.Type %in% rental.car] <- "Rental Car"
df$Complaint.New[df$Complaint.Type %in% health.issues] <- "Health Issues"
df$Complaint.New[df$Complaint.Type %in% drugs] <- "Drugs"
df$Complaint.New[df$Complaint.Type %in% dof] <- "DOF"
df$Complaint.Date <- as.Date(as.POSIXct(df$Created.Date, format="%m/%d/%Y"))
df$Complaint.Hour <- hour(as.POSIXct(df$Created.Date, format="%m/%d/%Y %I:%M:%S %p"))
df_complaints <- df[,c("Complaint.Hour","Complaint.New")]
df_complaints <- dcast(df_complaints, Complaint.New~Complaint.Hour)
df_complaints
ggparcoord(df_complaints, columns = 2:25, groupColumn = "Complaint.New", scale = "globalminmax")
library(parcoords)
parcoords(df_complaints)
library(parcoords)
parcoords(df_complaints,
brush = "1D-axes",
reorderable = TRUE)
library(parcoords)
parcoords(df_complaints,
brush = "2D-axes",
reorderable = TRUE)
library(parcoords)
parcoords(df_complaints,
brushMode = "2D-axes",
reorderable = TRUE)
library(parcoords)
parcoords(df_complaints,
brushMode = "1D-axes",
reorderable = TRUE)
library(parcoords)
parcoords(df_complaints,
brushMode = "1d-axes",
reorderable = TRUE)
